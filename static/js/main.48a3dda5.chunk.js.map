{"version":3,"sources":["components/List.js","components/Details.js","App.js","serviceWorker.js","index.js"],"names":["List","setOutput","useState","isLoading","setIsLoading","selectedId","setSelectedId","usersList","setUsersList","useEffect","axios","get","then","resp","data","className","map","item","key","id","onClick","name","Details","props","info","setInfo","undefined","output","avatar","src","alt","details","Object","keys","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kTA6CeA,EAvCF,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACIC,oBAAS,GADb,mBACvBC,EADuB,KACZC,EADY,OAEMF,mBAAS,MAFf,mBAEvBG,EAFuB,KAEXC,EAFW,OAGIJ,mBAAS,IAHb,mBAGvBK,EAHuB,KAGZC,EAHY,KAK9BC,qBAAU,WACRL,GAAa,GACbM,IAAMC,IATR,kHASkBC,MAAK,SAACC,GACpBL,EAAaK,EAAKC,MAClBV,GAAa,QAEd,IAOH,OACE,oCACE,yBAAKW,UAAU,SACZZ,EACC,yBAAKY,UAAU,UAAf,WAEAR,EAAUS,KAAI,SAACC,GAAD,OACZ,wBACEC,IAAKD,EAAKE,GACVJ,UAAWE,EAAKE,KAAOd,EAAa,mBAAqB,OACzDe,QAAS,kBAfAD,EAekBF,EAAKE,GAfnBE,EAeuBJ,EAAKI,KAdnDpB,EAAU,CAAEkB,KAAIE,cAChBf,EAAca,GAFI,IAACA,EAAIE,IAiBZJ,EAAKI,YCeLC,EA/CC,SAACC,GAAW,IAAD,EACDrB,mBAAS,IADR,mBAClBsB,EADkB,KACZC,EADY,OAESvB,oBAAS,GAFlB,mBAElBC,EAFkB,KAEPC,EAFO,KAkBzB,OAdAK,qBAAU,gBACgBiB,IAApBH,EAAMI,OAAOR,KACff,GAAa,GACbM,IACGC,IADH,8GAE2GY,EAAMI,OAAOR,GAFxH,UAIGP,MAAK,SAACC,GACLY,EAAQZ,EAAKC,MACbV,GAAa,SAGlB,CAACmB,EAAMI,OAAOR,KAGf,oCACGhB,EACC,yBAAKY,UAAU,UAAf,WAEA,yBAAKA,UAAU,WACZS,EAAKI,QACJ,yBAAKC,IAAKL,EAAKI,OAAQE,IAAKN,EAAKH,KAAMN,UAAU,WAElDS,EAAKH,MAAQ,wBAAIN,UAAU,QAAQS,EAAKH,MACxCG,EAAKO,SACJC,OAAOC,KAAKT,EAAKO,SAASf,KAAI,SAACE,GAAD,OAC5B,uBAAGA,IAAKA,EAAKH,UAAU,QACpBG,EADH,KACUM,EAAKO,QAAQb,UCbtBgB,MAhBf,WAAgB,IAAD,EACeC,IAAMjC,SAAS,IAD9B,mBACNyB,EADM,KACE1B,EADF,KAEb,OACE,yBAAKc,UAAU,aACb,yBAAKA,UAAU,sBAAf,KAA4C,IAC5C,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,qBAAf,KAA2C,KACtC,IACP,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAMd,UAAWA,IACjB,kBAAC,EAAD,CAAS0B,OAAQA,KACZ,MCLOS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48a3dda5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst path =\n  \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/hooks-context/use-effect/data/users.json\";\n\nconst List = ({ setOutput }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedId, setSelectedId] = useState(null);\n  const [usersList, setUsersList] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    axios.get(path).then((resp) => {\n      setUsersList(resp.data);\n      setIsLoading(false);\n    });\n  }, []);\n\n  const handleClick = (id, name) => {\n    setOutput({ id, name });\n    setSelectedId(id);\n  };\n\n  return (\n    <>\n      <div className=\"users\">\n        {isLoading ? (\n          <div className=\"loader\">Load...</div>\n        ) : (\n          usersList.map((item) => (\n            <li\n              key={item.id}\n              className={item.id === selectedId ? \"item active_item\" : \"item\"}\n              onClick={() => handleClick(item.id, item.name)}\n            >\n              {item.name}\n            </li>\n          ))\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default List;\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nconst Details = (props) => {\n  const [info, setInfo] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (props.output.id !== undefined) {\n      setIsLoading(true);\n      axios\n        .get(\n          `https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/hooks-context/use-effect/data/${props.output.id}.json`\n        )\n        .then((resp) => {\n          setInfo(resp.data);\n          setIsLoading(false);\n        });\n    }\n  }, [props.output.id]);\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"loader\">Load...</div>\n      ) : (\n        <div className=\"details\">\n          {info.avatar && (\n            <img src={info.avatar} alt={info.name} className=\"avatar\" />\n          )}\n          {info.name && <h5 className=\"name\">{info.name}</h5>}\n          {info.details &&\n            Object.keys(info.details).map((key) => (\n              <p key={key} className=\"info\">\n                {key}: {info.details[key]}\n              </p>\n            ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nDetails.propTypes = {\n  info: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n  }),\n};\n\nexport default Details;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport List from \"./components/List\";\nimport Details from \"./components/Details\";\n\nfunction App() {\n  const [output, setOutput] = React.useState({});\n  return (\n    <div className=\"container\">\n      <div className=\"background-element\"> </div>{\" \"}\n      <div className=\"highlight-window\">\n        <div className=\"highlight-overlay\"> </div>{\" \"}\n      </div>{\" \"}\n      <div className=\"window\">\n        <List setOutput={setOutput} />\n        <Details output={output} />\n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}